name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Kagi Assistant Desktop ${{ github.ref }}
          draft: false
          prerelease: false
          
  build-and-upload:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: kagi-assistant-desktop_amd64.deb
            glob_pattern: 'src-tauri/target/release/bundle/deb/kagi-assistant*.deb'
            bundles: 'deb'
            
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: kagi-assistant-desktop_amd64.rpm
            glob_pattern: 'src-tauri/target/release/bundle/rpm/kagi-assistant*.rpm'
            bundles: 'rpm'
            
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: kagi-assistant-desktop_amd64.AppImage
            glob_pattern: 'src-tauri/target/release/bundle/appimage/kagi-assistant*.AppImage'
            bundles: 'appimage'
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: kagi-assistant-desktop_x64.msi
            glob_pattern: 'src-tauri/target/release/bundle/msi/*.msi'
            bundles: 'msi'
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: kagi-assistant-desktop_x64-setup.exe
            glob_pattern: 'src-tauri/target/release/bundle/nsis/*-setup.exe'
            bundles: 'nsis'
            
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: kagi-assistant-desktop_x64.dmg
            glob_pattern: 'src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg'
            bundles: 'dmg'
            
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: kagi-assistant-desktop_arm64.dmg
            glob_pattern: 'src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg'
            bundles: 'dmg'
            
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      
      - name: Install frontend dependencies
        run: bun install
        
      - name: Show Tauri config
        run: cat src-tauri/tauri.conf.json
        shell: bash
        
      - name: Debug Tauri workspace (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          ls -la
          ls -la src-tauri/
        shell: bash
        
      - name: Debug Tauri workspace (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dir
          dir src-tauri\
        shell: pwsh
        
      - name: Check available bundle formats
        run: bun tauri build --help
        shell: bash
        continue-on-error: true
        
      - name: Build
        id: build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_BUILD_DEBUG: true
          TAURI_LOG_LEVEL: debug
        with:
          tauriScript: "bun tauri"
          args: "--verbose --bundles ${{ matrix.bundles }} --target ${{ matrix.target }}"
          tagName: ${{ github.ref_name }}
          releaseName: 'Kagi Assistant Desktop ${{ github.ref_name }}'
          releaseBody: ''
          releaseDraft: true
          prerelease: false
      
      - name: List artifacts directory (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            if [ "${{ matrix.target }}" == "x86_64-apple-darwin" ]; then
              ls -la src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/
            else
              ls -la src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/
            fi
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            ls -la src-tauri/target/release/bundle/deb/
            ls -la src-tauri/target/release/bundle/rpm/
            ls -la src-tauri/target/release/bundle/appimage/
          fi
        shell: bash
        continue-on-error: true
        
      - name: List artifacts directory (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dir src-tauri\target\release\bundle\msi\
          dir src-tauri\target\release\bundle\nsis\
        shell: pwsh
        continue-on-error: true
        
      - name: Manual build for macOS if needed
        if: matrix.os == 'macos-latest' && failure()
        run: |
          cd src-tauri
          bun tauri build --verbose --bundles dmg --target ${{ matrix.target }}
          if [ "${{ matrix.target }}" == "x86_64-apple-darwin" ]; then
            ls -la target/x86_64-apple-darwin/release/bundle/dmg/
          else
            ls -la target/aarch64-apple-darwin/release/bundle/dmg/
          fi
        shell: bash
        continue-on-error: true
      
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.glob_pattern }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          draft: true
          prerelease: false 